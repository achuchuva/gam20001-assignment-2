//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Jesse_InputActions/Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input Actions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""03d827c6-860c-4005-89d9-4f2ca7fb71ea"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""706afa22-8a82-4b3a-861a-abda78c9e123"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""2f9eac37-749d-4620-ac77-3f94479a84fe"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""be708fd9-c6b6-49c8-bddd-1d0f47367fb1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec26806e-1b9b-4eab-8244-0d59b4c6ca32"",
                    ""path"": ""<Mouse>/position/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1167ddf6-f523-4e97-a22c-14d3a40cf89c"",
                    ""path"": ""<Mouse>/position/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ObjectManipulation"",
            ""id"": ""51911442-dbc6-48fb-a542-2c6eb7ec9ac2"",
            ""actions"": [
                {
                    ""name"": ""HideObject"",
                    ""type"": ""Button"",
                    ""id"": ""0c62f993-1778-40f4-b008-0f6935170dcd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CreateObject"",
                    ""type"": ""Button"",
                    ""id"": ""39983a26-24e1-4f02-b466-ecc4b8d5f8f4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DeleteObject"",
                    ""type"": ""Button"",
                    ""id"": ""0251cc41-e27e-4d0e-ad46-ed82b520b46c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""530d1171-bfb0-4e51-b06f-2534671cd459"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HideObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9a3412f-ca80-43c5-8060-84513964800f"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CreateObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""06ff41cb-a589-4aea-8a14-59ab06bec37a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DeleteObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        // ObjectManipulation
        m_ObjectManipulation = asset.FindActionMap("ObjectManipulation", throwIfNotFound: true);
        m_ObjectManipulation_HideObject = m_ObjectManipulation.FindAction("HideObject", throwIfNotFound: true);
        m_ObjectManipulation_CreateObject = m_ObjectManipulation.FindAction("CreateObject", throwIfNotFound: true);
        m_ObjectManipulation_DeleteObject = m_ObjectManipulation.FindAction("DeleteObject", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Move;
    public struct PlayerActions
    {
        private @InputActions m_Wrapper;
        public PlayerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // ObjectManipulation
    private readonly InputActionMap m_ObjectManipulation;
    private List<IObjectManipulationActions> m_ObjectManipulationActionsCallbackInterfaces = new List<IObjectManipulationActions>();
    private readonly InputAction m_ObjectManipulation_HideObject;
    private readonly InputAction m_ObjectManipulation_CreateObject;
    private readonly InputAction m_ObjectManipulation_DeleteObject;
    public struct ObjectManipulationActions
    {
        private @InputActions m_Wrapper;
        public ObjectManipulationActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @HideObject => m_Wrapper.m_ObjectManipulation_HideObject;
        public InputAction @CreateObject => m_Wrapper.m_ObjectManipulation_CreateObject;
        public InputAction @DeleteObject => m_Wrapper.m_ObjectManipulation_DeleteObject;
        public InputActionMap Get() { return m_Wrapper.m_ObjectManipulation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ObjectManipulationActions set) { return set.Get(); }
        public void AddCallbacks(IObjectManipulationActions instance)
        {
            if (instance == null || m_Wrapper.m_ObjectManipulationActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ObjectManipulationActionsCallbackInterfaces.Add(instance);
            @HideObject.started += instance.OnHideObject;
            @HideObject.performed += instance.OnHideObject;
            @HideObject.canceled += instance.OnHideObject;
            @CreateObject.started += instance.OnCreateObject;
            @CreateObject.performed += instance.OnCreateObject;
            @CreateObject.canceled += instance.OnCreateObject;
            @DeleteObject.started += instance.OnDeleteObject;
            @DeleteObject.performed += instance.OnDeleteObject;
            @DeleteObject.canceled += instance.OnDeleteObject;
        }

        private void UnregisterCallbacks(IObjectManipulationActions instance)
        {
            @HideObject.started -= instance.OnHideObject;
            @HideObject.performed -= instance.OnHideObject;
            @HideObject.canceled -= instance.OnHideObject;
            @CreateObject.started -= instance.OnCreateObject;
            @CreateObject.performed -= instance.OnCreateObject;
            @CreateObject.canceled -= instance.OnCreateObject;
            @DeleteObject.started -= instance.OnDeleteObject;
            @DeleteObject.performed -= instance.OnDeleteObject;
            @DeleteObject.canceled -= instance.OnDeleteObject;
        }

        public void RemoveCallbacks(IObjectManipulationActions instance)
        {
            if (m_Wrapper.m_ObjectManipulationActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IObjectManipulationActions instance)
        {
            foreach (var item in m_Wrapper.m_ObjectManipulationActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ObjectManipulationActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ObjectManipulationActions @ObjectManipulation => new ObjectManipulationActions(this);
    public interface IPlayerActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IObjectManipulationActions
    {
        void OnHideObject(InputAction.CallbackContext context);
        void OnCreateObject(InputAction.CallbackContext context);
        void OnDeleteObject(InputAction.CallbackContext context);
    }
}
